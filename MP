local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

local craftRemote = ReplicatedStorage
	:WaitForChild("rbxts_include")
	:WaitForChild("node_modules")
	:WaitForChild("@rbxts")
	:WaitForChild("net")
	:WaitForChild("out")
	:WaitForChild("_NetManaged")
	:WaitForChild("CraftingEntityInteract")

local function findAllCauldrons()
	local cauldrons = {}
	for _, obj in pairs(workspace:GetDescendants()) do
		if obj:IsA("BasePart") and obj.Name == "brewing_cauldron" then
			table.insert(cauldrons, obj)
		end
	end
	return cauldrons
end

local function findClosestCauldron()
	local cauldrons = findAllCauldrons()
	local closest, shortest = nil, math.huge
	local char = player.Character
	if not char or not char.PrimaryPart then return nil end
	local pos = char.PrimaryPart.Position

	for _, cauldron in pairs(cauldrons) do
		local dist = (cauldron.Position - pos).Magnitude
		if dist < shortest then
			shortest = dist
			closest = cauldron
		end
	end
	return closest
end

local function getCorrectInventory()
	local inventories = ReplicatedStorage:WaitForChild("Inventories")
	local best, most = nil, 0
	for _, folder in pairs(inventories:GetChildren()) do
		if folder.Name == player.Name then
			local count = #folder:GetChildren()
			if count > most then
				best = folder
				most = count
			end
		end
	end
	return best
end

local function getMushroomCount()
	local inv = getCorrectInventory()
	if not inv then return 0 end
	local mushrooms = inv:FindFirstChild("mushrooms")
	if mushrooms then
		local amount = mushrooms:GetAttribute("Amount")
		return amount or 0
	end
	return 0
end

local function deductMushrooms(amountToDeduct)
	local inv = getCorrectInventory()
	if not inv then return end
	local mushrooms = inv:FindFirstChild("mushrooms")
	if mushrooms then
		local currentAmount = mushrooms:GetAttribute("Amount") or 0
		if currentAmount >= amountToDeduct then
			mushrooms:SetAttribute("Amount", currentAmount - amountToDeduct)
		end
	end
end

local function depositMushroom()
	local cauldron = findClosestCauldron()
	if not cauldron then return end

	local count = getMushroomCount()
	if count < 1 then return end -- only deposit if at least 1

	local id = nil
	if cauldron.GetAttribute then
		id = cauldron:GetAttribute("id")
	end

	craftRemote:FireServer({
		craftingEntity = {
			itemType = "brewing_cauldron",
			position = cauldron.Position,
			id = id,
			owner = player,
			craftingBlock = cauldron,
		},
		itemInHand = "mushrooms",
		amount = 1,
	})

	deductMushrooms(1)
end

task.spawn(function()
	while true do
		if getMushroomCount() >= 1 then
			depositMushroom()
		end
		task.wait(0.75)
	end
end)
